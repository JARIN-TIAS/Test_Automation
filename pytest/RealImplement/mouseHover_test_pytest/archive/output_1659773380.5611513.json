{"content": {"suites": {"0": {"status": {"total_pass": 2, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_Samsung", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_Apple", "rerun": "0"}}, "suite_name": "gsmreana_mousehover_test.py"}, "1": {"suite_name": "mousehover_test.py", "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n     (Session info: chrome=104.0.5112.80)\n   Stacktrace:\n   Backtrace:\n   \tOrdinal0 [0x010478B3+2193587]\n   \tOrdinal0 [0x00FE0681+1771137]\n   \tOrdinal0 [0x00EF4070+802928]\n   \tOrdinal0 [0x00EE9AB2+760498]\n   \tOrdinal0 [0x00EDCEAF+708271]\n   \tOrdinal0 [0x00EE1142+725314]\n   \tOrdinal0 [0x00EE55C9+742857]\n   \tOrdinal0 [0x00EF5500+808192]\n   \tOrdinal0 [0x00F4D2C2+1168066]\n   \tOrdinal0 [0x00F3D5C6+1103302]\n   \tOrdinal0 [0x00F177E0+948192]\n   \tOrdinal0 [0x00F186E6+952038]\n   \tGetHandleVerifier [0x012F0CB2+2738370]\n   \tGetHandleVerifier [0x012E21B8+2678216]\n   \tGetHandleVerifier [0x010D17AA+512954]\n   \tGetHandleVerifier [0x010D0856+509030]\n   \tOrdinal0 [0x00FE743B+1799227]\n   \tOrdinal0 [0x00FEBB68+1817448]\n   \tOrdinal0 [0x00FEBC55+1817685]\n   \tOrdinal0 [0x00FF5230+1856048]\n   \tBaseThreadInitThunk [0x76696739+25]\n   \tRtlGetFullPathName_UEx [0x77418FEF+1215]\n   \tRtlGetFullPathName_UEx [0x77418FBD+1165]\n", "test_name": "test_recruitement_button", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture()\n    \n    def browser_config():\n        global driver\n    \n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        print('browser lunch success')\n        driver.maximize_window()\n        driver.get('https://opensource-demo.orangehrmlive.com/index.php/pim/viewPersonalDetails/empNumber/7')\n        print('URL open success')\n    \n        # username\n>       username = driver.find_element(By.ID, 'txtUsername')\n\nmousehover_test.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\USER\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\USER\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013E20632020>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...unk [0x76696739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77418FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77418FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=104.0.5112.80)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x010478B3+2193587]\nE       \tOrdinal0 [0x00FE0681+1771137]\nE       \tOrdinal0 [0x00EF41A8+803240]\nE       \tOrdinal0 [0x00EDC910+706832]\nE       \tOrdinal0 [0x00F40139+1114425]\nE       \tOrdinal0 [0x00F4D282+1168002]\nE       \tOrdinal0 [0x00F3D5C6+1103302]\nE       \tOrdinal0 [0x00F177E0+948192]\nE       \tOrdinal0 [0x00F186E6+952038]\nE       \tGetHandleVerifier [0x012F0CB2+2738370]\nE       \tGetHandleVerifier [0x012E21B8+2678216]\nE       \tGetHandleVerifier [0x010D17AA+512954]\nE       \tGetHandleVerifier [0x010D0856+509030]\nE       \tOrdinal0 [0x00FE743B+1799227]\nE       \tOrdinal0 [0x00FEBB68+1817448]\nE       \tOrdinal0 [0x00FEBC55+1817685]\nE       \tOrdinal0 [0x00FF5230+1856048]\nE       \tBaseThreadInitThunk [0x76696739+25]\nE       \tRtlGetFullPathName_UEx [0x77418FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x77418FBD+1165]\n\nC:\\Users\\USER\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchWindowException\n", "test_name": "test_performance_button", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 1}}}}, "date": "August 06, 2022", "start_time": 1659773021.6371553, "total_suite": 2, "status": "FAIL", "status_list": {"pass": "2", "fail": "1", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}